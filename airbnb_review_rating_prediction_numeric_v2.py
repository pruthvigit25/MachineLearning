# -*- coding: utf-8 -*-
"""airbnb_review_rating_prediction_numeric_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1icw0jAOTviD4v5Lxn9adJmuKRj0Abd2i
"""

from sklearn import datasets
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, balanced_accuracy_score
from sklearn.linear_model import LogisticRegression
import seaborn as sn
from sklearn import svm

df_listing2 = pd.read_csv("/content/drive/MyDrive/AirBnB/listings2.csv")

df_listing2.shape

df_listing2.head()

df_listing2['host_response_rate'] = df_listing2['host_response_rate'].str.rstrip('%').astype('float') / 100.0
df_listing2['host_acceptance_rate'] = df_listing2['host_acceptance_rate'].str.rstrip('%').astype('float') / 100.0
df_listing2['price'] = df_listing2['price'].str.lstrip('$')
df_listing2['price'] = df_listing2['price'].str.replace(',','').astype('float')

df_listing2.drop(columns=['id'], inplace=True)
df_listing2.drop(columns=['listing_url'], inplace=True)
df_listing2.drop(columns=['scrape_id'], inplace=True)
df_listing2.drop(columns=['source'], inplace=True)
df_listing2.drop(columns=['name'], inplace=True)
df_listing2.drop(columns=['description'], inplace=True)
df_listing2.drop(columns=['neighborhood_overview'], inplace=True)
df_listing2.drop(columns=['picture_url'], inplace=True)
df_listing2.drop(columns=['last_scraped'], inplace=True)
df_listing2.drop(columns=['host_id'], inplace=True)
df_listing2.drop(columns=['host_url'], inplace=True)
df_listing2.drop(columns=['host_name'], inplace=True)
df_listing2.drop(columns=['host_since'], inplace=True)
df_listing2.drop(columns=['host_about'], inplace=True)
df_listing2.drop(columns=['host_thumbnail_url'], inplace=True)
df_listing2.drop(columns=['host_picture_url'], inplace=True)
df_listing2.drop(columns=['license'], inplace=True)
df_listing2.drop(columns=['host_verifications'], inplace=True)
df_listing2.drop(columns=['first_review'], inplace=True)
df_listing2.drop(columns=['last_review'], inplace=True)
df_listing2.drop(columns=['calendar_last_scraped'], inplace=True)
df_listing2.drop(columns=['calendar_updated'], inplace=True)
df_listing2.drop(columns=['neighbourhood_group_cleansed'], inplace=True)
df_listing2.drop(columns=['bathrooms'], inplace=True)

df_listing2.info()

df_listing2.describe()

df_listing2.neighbourhood = pd.Categorical(df_listing2.neighbourhood)
df_listing2['neighbourhood'] = df_listing2.neighbourhood.cat.codes

df_listing2.host_is_superhost = pd.Categorical(df_listing2.host_is_superhost)
df_listing2['host_is_superhost'] = df_listing2.host_is_superhost.cat.codes

df_listing2.host_location = pd.Categorical(df_listing2.host_location)
df_listing2['host_location'] = df_listing2.host_location.cat.codes

df_listing2.host_response_time = pd.Categorical(df_listing2.host_response_time)
df_listing2['host_response_time'] = df_listing2.host_response_time.cat.codes

df_listing2.host_neighbourhood = pd.Categorical(df_listing2.host_neighbourhood)
df_listing2['host_neighbourhood'] = df_listing2.host_neighbourhood.cat.codes

df_listing2.host_has_profile_pic = pd.Categorical(df_listing2.host_has_profile_pic)
df_listing2['host_has_profile_pic'] = df_listing2.host_has_profile_pic.cat.codes

df_listing2.host_identity_verified = pd.Categorical(df_listing2.host_identity_verified)
df_listing2['host_identity_verified'] = df_listing2.host_identity_verified.cat.codes

df_listing2.neighbourhood_cleansed = pd.Categorical(df_listing2.neighbourhood_cleansed)
df_listing2['neighbourhood_cleansed'] = df_listing2.neighbourhood_cleansed.cat.codes

df_listing2.property_type = pd.Categorical(df_listing2.property_type)
df_listing2['property_type'] = df_listing2.property_type.cat.codes

df_listing2.room_type = pd.Categorical(df_listing2.room_type)
df_listing2['room_type'] = df_listing2.room_type.cat.codes

df_listing2.bathrooms_text = pd.Categorical(df_listing2.bathrooms_text)
df_listing2['bathrooms_text'] = df_listing2.bathrooms_text.cat.codes

df_listing2.amenities = pd.Categorical(df_listing2.amenities)
df_listing2['amenities'] = df_listing2.amenities.cat.codes

df_listing2.instant_bookable = pd.Categorical(df_listing2.instant_bookable)
df_listing2['instant_bookable'] = df_listing2.instant_bookable.cat.codes


df_listing2.has_availability = pd.Categorical(df_listing2.has_availability)
df_listing2['has_availability'] = df_listing2.has_availability.cat.codes

df_listing2.isnull().sum()

df_listing2.corr()

cr = df_listing2.corr()

max(cr[cr==1])

cr.host_response_time[cr.host_response_time<1].max()

cr2 = pd.concat([cr.iloc[0:38,38:45], cr.iloc[45:,38:45]])

cr2

sn.heatmap(cr2)

cr2[cr2<1].min(axis=0)

cr2[cr2<1].max(axis=0)

df_listing2 = df_listing2.fillna(0)

df_train_all, df_test_all = train_test_split(df_listing2, test_size = 0.2, random_state = 1)

df_train_y = df_train_all.iloc[:,38:45]
df_train_X = df_train_all.drop(columns=['review_scores_rating','review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value'])

df_test_y = df_test_all.iloc[:,38:45]
df_test_X = df_test_all.drop(columns=['review_scores_rating','review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value'])

from sklearn.dummy import DummyClassifier

clf_dummy = DummyClassifier(strategy="most_frequent")

clf_dummy.fit(df_train_X, np.round(df_train_y.iloc[:,0]))

print(classification_report(np.round(df_train_y.iloc[:,0]), clf_dummy.predict(df_train_X), digits=4))
print(classification_report(np.round(df_test_y.iloc[:,0]), clf_dummy.predict(df_test_X), digits=4))

from sklearn.dummy import DummyClassifier

clf_dummy = DummyClassifier(strategy="stratified")

clf_dummy.fit(df_train_X, np.round(df_train_y.iloc[:,0]))

print(classification_report(np.round(df_train_y.iloc[:,0]), clf_dummy.predict(df_train_X), digits=4))
print(classification_report(np.round(df_test_y.iloc[:,0]), clf_dummy.predict(df_test_X), digits=4))

knn = KNeighborsClassifier(n_neighbors=100)
knn.fit(df_train_X, np.round(df_train_y.iloc[:,0]))
knn.score(df_test_X, np.round(df_test_y.iloc[:,0]))

print(classification_report(np.round(df_train_y.iloc[:,0]), knn.predict(df_train_X), digits=4))
print(classification_report(np.round(df_test_y.iloc[:,0]), knn.predict(df_test_X), digits=4))

confusion_matrix = metrics.confusion_matrix(np.round(df_test_y.iloc[:,0]), knn.predict(df_test_X))

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix)

cm_display.plot()
plt.show()

#Create a svm Classifier
svm = svm.SVC(kernel='rbf') # Linear Kernel
svm.fit(df_train_X, np.round(df_train_y.iloc[:,0]))
svm.score(df_test_X, np.round(df_test_y.iloc[:,0]))

confusion_matrix = metrics.confusion_matrix(np.round(df_test_y.iloc[:,0]), knn.predict(df_test_X))

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix)

print(classification_report(np.round(df_train_y.iloc[:,0]), svm.predict(df_train_X), digits=4))

print(classification_report(np.round(df_test_y.iloc[:,0]), svm.predict(df_test_X), digits=4))

cm_display.plot()
plt.show()

clf_lr = LogisticRegression(multi_class='auto',
                            verbose=1,
                            n_jobs=-1)

clf_lr.fit(df_train_X, np.round(df_train_y.iloc[:,0]))

print("Accuracy of Logistic Regression on Training Dataset is: " + str(clf_lr.score(df_train_X, np.round(df_train_y.iloc[:,0]))))
print("Accuracy of Logistic Regression on Test Dataset is: " + str(clf_lr.score(df_test_X, np.round(df_test_y.iloc[:,0]))))

confusion_matrix = metrics.confusion_matrix(np.round(df_test_y.iloc[:,0]), clf_lr.predict(df_test_X)) 

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix)

cm_display.plot()
plt.show()

print(classification_report(np.round(df_train_y.iloc[:,0]), clf_lr.predict(df_train_X), digits=4))
print(classification_report(np.round(df_test_y.iloc[:,0]), clf_lr.predict(df_test_X), digits=4))